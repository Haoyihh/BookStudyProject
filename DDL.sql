-- drop table
BEGIN EXECUTE IMMEDIATE 'DROP TABLE user CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE customer CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE customer_membership CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE membership CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE building CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE space CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE booking CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE payment CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE preference CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP TABLE reviews CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;

-- drop sequence
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE customer_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE user_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE membership_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE building_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE space_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE booking_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE payment_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE preference_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE reviews_seq'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;



-- user sequence
CREATE SEQUENCE user_seq START WITH 1 INCREMENT BY 1 NOCACHE;

-- user table
CREATE TABLE user (
    user_id NUMBER PRIMARY KEY,
    username VARCHAR(20) NOT NULL,
    password VARCHAR(20) NOT NULL,
    user_type VARCHAR(20) NOT NULL
);

--customer sequence
CREATE SEQUENCE customer_seq START WITH 1 INCREMENT BY 1 NOCACHE;

--customer table
CREATE TABLE customer(
    customer_ID NUMBER PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(12) NOT NULL

);
--membership sequence
CREATE SEQUENCE membership_seq START WITH 1 INCREMENT BY 1 NOCACHE;

--membership table
CREATE TABLE membership(
membership_ID NUMBER PRIMARY KEY,
membership_type VARCHAR(255) NOT NULL,
membership_price NUMBER(10,2) NOT NULL
);

--customer_membership table
CREATE TABLE customer_membership(
 membership_customer_ID NUMBER PRIMARY KEY,
    customer_ID NUMBER,
    membership_ID NUMBER,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (customer_ID) REFERENCES Customer(customer_ID),
    FOREIGN KEY (membership_ID) REFERENCES Membership(membership_ID)
);

--building sequence
CREATE SEQUENCE building_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--building table
CREATE TABLE building (
    building_ID NUMBER PRIMARY KEY,
    building_name VARCHAR(20) NOT NULL
);

--space sequence
CREATE SEQUENCE space_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--space table
CREATE TABLE space (
    space_ID NUMBER PRIMARY KEY,
    building_ID NUMBER,
    space_type VARCHAR(255) NOT NULL,
    capacity NUMBER NOT NULL,
    status VARCHAR(20) NOT NULL,
    base_price NUMBER(10,2) NOT NULL,
    FOREIGN KEY (building_ID) REFERENCES Building(building_ID)
);

--booking sequence
CREATE SEQUENCE booking_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--booking table
CREATE TABLE booking (
    booking_ID NUMBER PRIMARY KEY,
    customer_ID NUMBER,
    space_ID NUMBER,
    booking_start_time DATE NOT NULL,
    booking_end_time DATE NOT NULL,
    status VARCHAR(20) NOT NULL,
    FOREIGN KEY (customer_ID) REFERENCES Customer(customer_ID),
    FOREIGN KEY (space_ID) REFERENCES Space(space_ID)
);

--payment seq
CREATE SEQUENCE payment_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--payment table
CREATE TABLE payment (
    payment_ID NUMBER PRIMARY KEY,
    customer_ID NUMBER,
    booking_ID NUMBER,
    amount NUMBER(10,2) NOT NULL,
    payment_method VARCHAR(20) NOT NULL,
    payment_datetime DATE NOT NULL,
    FOREIGN KEY (customer_ID) REFERENCES Customer(customer_ID),
    FOREIGN KEY (booking_ID) REFERENCES Booking(booking_ID)
);
--preference seq
CREATE SEQUENCE preference_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--preference table
CREATE TABLE preference (
    preference_ID NUMBER PRIMARY KEY,
    building_ID NUMBER,
    preference_type VARCHAR(20) NOT NULL,
    preference_description CLOB,
    FOREIGN KEY (building_ID) REFERENCES Building(building_ID)
);
--reviews seq

CREATE SEQUENCE reviews_seq START WITH 1 INCREMENT BY 1 NOCACHE;
--reviews table
CREATE TABLE reviews (
    review_ID NUMBER PRIMARY KEY,
    customer_ID NUMBER,
    space_ID NUMBER,
    building_ID NUMBER,
    comments VARCHAR(255),
    rating NUMBER(2,1) NOT NULL,
    review_date DATE NOT NULL,
    FOREIGN KEY (customer_ID) REFERENCES Customer(customer_ID),
    FOREIGN KEY (space_ID) REFERENCES Space(space_ID),
    FOREIGN KEY (building_ID) REFERENCES Building(building_ID)
);


